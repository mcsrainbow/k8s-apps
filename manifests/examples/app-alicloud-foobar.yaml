---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: foobar
  name: foobar-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: foobar
  template:
    metadata:
      labels:
        app: foobar
    spec:
      terminationGracePeriodSeconds: 120
      imagePullSecrets:
        - name: foobar-secret-register
      volumes:
        - name: bazqux-volume
          emptyDir: {}
      initContainers:
        - name: download-bazqux-agent
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |
              echo "INFO: Downloading /bazqux/agent.jar..." \
              && wget --no-check-certificate -O /bazqux/agent.jar https://example.com/bazqux/agent.jar
          volumeMounts:
            - name: bazqux-volume
              mountPath: /bazqux
      containers:
        - name: foobar
          image: register.example.com/project/foobar:v1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          startupProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 30
            successThreshold: 1 # must be 1 by design
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            successThreshold: 1 # must be 1 by design
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 20
            failureThreshold: 3
            successThreshold: 2
            timeoutSeconds: 2
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 60"]
          volumeMounts:
            - name: bazqux-volume
              mountPath: /bazqux
          env:
            - name: "BAZQUX_SITE"
              value: "bazqux.example.org"
            - name: "BAZQUX_PORT"
              value: "857"
            - name: "BAZQUX_TOKEN"
              value: "abc1DeF2GH3ij4KLm"
            - name: "JAVA_TOOL_OPTIONS"
              value: "-javaagent:/bazqux/agent.jar"
            - name: TZ
              value: Asia/Shanghai
            - name: aliyun_logs_foobar-stdout
              value: stdout
            - name: PG_HOST
              valueFrom:
                secretKeyRef:
                  name: foobar-secret-db
                  key: PG_HOST
            - name: PG_PORT
              valueFrom:
                secretKeyRef:
                  name: foobar-secret-db
                  key: PG_PORT
            - name: PG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: foobar-secret-db
                  key: PG_DATABASE
            - name: PG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: foobar-secret-db
                  key: PG_USERNAME
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: foobar-secret-db
                  key: PG_PASSWORD
            - name: PG_URL
              value: >-
                postgresql://$(PG_USERNAME):$(PG_PASSWORD)@$(PG_HOST):$(PG_PORT)/$(PG_DATABASE)
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
            limits:
              cpu: 1000m
              memory: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  namespace: foobar
  name: foobar-svc
spec:
  selector:
    app: foobar
  clusterIP: None
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: foobar
  name: foobar-ingress
  annotations:
    alb.ingress.kubernetes.io/connection-drain-enabled: "true"
    alb.ingress.kubernetes.io/connection-drain-timeout: "60"
    alb.ingress.kubernetes.io/rewrite-target: /${1}
spec:
  ingressClassName: alb
  tls:
    - hosts:
        - foobar.example.com
  rules:
    - host: foobar.example.com
      http:
        paths:
          - path: /web/(.*)
            pathType: Prefix
            backend:
              service:
                name: foobar-svc
                port:
                  number: 8080
          - path: /api/(.*)
            pathType: Prefix
            backend:
              service:
                name: foobar-svc
                port:
                  number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: foobar-redirect-ingress
  namespace: foobar
  annotations:
    alb.ingress.kubernetes.io/actions.redirect-slash: |
      [{
          "type": "Redirect",
          "RedirectConfig": {
              "host": "${host}",
              "path": "${path}/",
              "port": "${port}",
              "protocol": "${protocol}",
              "query": "${query}",
              "httpCode": "301"
          }
      }]
spec:
  ingressClassName: alb
  tls:
    - hosts:
        - foobar.example.com
  rules:
    - host: foobar.example.com
      http:
        paths:
          - path: /web
            pathType: Exact
            backend:
              service:
                name: redirect-slash
                port:
                  name: use-annotation
